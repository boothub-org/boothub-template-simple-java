{{~def 'prjId' (asJavaId ghProjectId)~}}
{{~#def 'githubProjectUrl'}}https://github.com/{{ghProjectOwner}}/{{ghProjectId}}{{/def~}}
{{~#def 'githubRepoUrl'}}{{githubProjectUrl}}.git{{/def~}}
import org.gradle.plugins.signing.Sign
import javax.swing.*

plugins {
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.hierynomus.license" version "0.12.1"
    id "com.jfrog.bintray" version "1.8.1"
    id "net.saliman.properties" version "1.4.6"
}

project.version.with {
    major = {{prjId}}VersionMajor as int
    minor= {{prjId}}VersionMinor as int
    patch = {{prjId}}VersionPatch as int
    if (project.hasProperty('{{prjId}}VersionLabel')) {
        preRelease = {{prjId}}VersionLabel
    }
    releaseBuild = Boolean.valueOf({{prjId}}ReleaseBuild)
}
ext.{{prjId}}Version = project.version as String
ext.{{prjId}}Tag = Boolean.valueOf({{prjId}}ReleaseBuild) ? "v$ext.{{prjId}}Version" : 'master'

def pomConfig = {
    url "{{githubProjectUrl}}"
    developers {
        {{~#each developers}}
        developer {
            id "{{id}}"
            name "{{name}}"
            {{~#if email}}
            email "{{email}}"{{/if}}
        }
        {{~/each}}
    }
    scm {
        connection "{{githubRepoUrl}}"
        developerConnection "{{githubRepoUrl}}"
        url "{{githubProjectUrl}}"
    }
}

apply plugin: 'signing'
repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.hierynomus.license'

sourceCompatibility = 1.8
group = '{{group}}'
version = {{prjId}}Version

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    runtime ('ch.qos.logback:logback-classic:1.1.7')
    testCompile 'junit:junit:4.12'
    testCompile('ch.qos.logback:logback-classic:1.1.7')
}

jar {
    manifest {
        attributes 'Implementation-Title': "{{appModule.artifact}}",
                'Main-Class': '{{appModule.basePackage}}.{{appMainClass}}',
                'Implementation-Version': {{prjId}}Version
    }
}
mainClassName = '{{appModule.basePackage}}.{{appMainClass}}'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives(sourcesJar, javadocJar)
}

publishing {
    publications {
        "{{ghProjectId}}"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId '{{group}}'
            artifactId project.name
            version {{prjId}}Version
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', '{{ext.licenseName}}')
                licenseNode.appendNode('url', '{{ext.licenseUrl}}')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
    task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        if(!project.hasProperty('signingKeyId') || !project.hasProperty('signingSecretKeyRingFile'))
            throw new InvalidUserDataException("Please configure your signing credentials in gradle-local.properties.")
        def password = readPasswordFromConsole('Please enter your PGP credentials:', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['{{ghProjectId}}']
    pkg {
        repo = 'maven'
        name = '{{ghProjectId}}'
        userOrg = '{{ghProjectOwner}}'
        licenses = ['{{license}}']
        vcsUrl = '{{githubRepoUrl}}'

        version {
                name = {{prjId}}Version
                desc = "{{projectName}} ${{prjId}}Version"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = {{prjId}}Version
                gpg {
                    sign = true
                }
        }
    }
}
